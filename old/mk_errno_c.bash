#!/bin/bash

cat <<-EOF
/* This file was generated by running $0 */

#define _GNU_SOURCE

#include <stdlib.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <strings.h>
#include <getopt.h>

static struct
{
   int num;
   const char *str;
} errors[] =
/* The following was autogenerated */
{
    { 0, "0" },
EOF

cpp -dM /usr/include/errno.h | sed -e 's/^#[\t ]*define//g' |\
 awk '{ print $1}' | egrep '^E' | \
 awk '{print "  { " $1 " , \"" $1 "\"}," }'

cat <<-EOF
  { 0, NULL }
};


static int ret = 0;
static int is_hex = 0;
static int is_octal = 0;

int print_err(int i, int num)
{
  char *format[] = {
    "%d %s \"%s\"\n",
    "0x%X %s \"%s\"\n",
    "0%o %s \"%s\"\n"
  };

  char *fmt;
  fmt = format[0];
  if(is_hex)
    fmt = format[1];
  else if(is_octal)
    fmt= format[2];

  printf(fmt, errors[i].num, errors[i].str, strerror(num));
  return 0;
}

static void print_from_errno(int num, int print_error, char *name)
{
  int i;

  for(i=0;errors[i].str ; i++)
    if(errors[i].num == num)
    {
      print_err(i, num);
      return;
    }

  if(print_error)
  {
    if(!is_hex && !is_octal)
      printf("error number %d or error name %s not found\n", num, name);
    else if(is_hex)
      printf("error number 0x%X or error name %s not found\n", num, name);
    else
      printf("error number 0%o or error name %s not found\n", num, name);
    ret = 1; /* error: not found */
  }
}

static int print_from_string(const char *str,
  int print_error)
{
  int i;

  for(i=0;errors[i].str ; i++)
    if(!strcasecmp(errors[i].str, str))
    {
      print_err(i, errors[i].num);
      return 0; /* success */
    }

  if(print_error)
  {
    printf("error named '%s' not found\n", str);
    ret = 1;
  }

  return 1; /* error */
}


void print_all(void)
{
  int i;

  int max_errno = 0;

  /* we wish to sort the error numbers */

  for(i=0;errors[i].str ; i++)
    if(errors[i].num > max_errno)
      max_errno = errors[i].num;

  for(i=0;i < max_errno ; i++)
    print_from_errno(i, 0, "");

  exit(0);
}


void Usage(void)
{
  printf("  Usage: errno [-h|--help] [-o|--octal] [-H|--hex] [-a|--all]\n"
         "    or\n"
         "         errno [-o|--octal] [-H|--hex] ERR_NUM|ERR_MACRO_NAME [ERR_NUM|ERR_MACRO_NAME] ...\n"
         "\n"
         "  Print system error numbers and error macro names.\n"
         "  Like for example the command: 'errno ENOENT 9' will print\n"
         "\n"
         "      ");
  print_from_string("ENOENT", 1);
  printf("      ");
  print_from_errno(9, 1, "9");
  printf("\n"
         "  OPTIONS:\n"
         "    -a|--all    print all error numbers and names\n"
         "    -o|--octal  read and write in octal numbers\n"
         "    -H|--hex    read and write in hex numbers\n"
         );
  exit(1);
}

void add_request_str(char ***s, int *s_len, char **str)
{
  ++(*s_len);
  *s = (char **) realloc(*s, sizeof(char *)*(*s_len));
  (*s)[(*s_len)-1] = (char *)(*str);
}

int main(int argc, char **argv)
{
  int i;
  int do_print_all = 0;
  int base = 10;

  int num_error_requests = 0;
  char **error_requests = NULL;

  if(argc < 2)
    Usage();

  if(argc >= 2)
    for(i=1; i<argc; ++i)
    {
      if(argv[i][0] == '-')
      {
        char *s = argv[i];
        for(++s; *s; ++s)
          if(*s != 'a' &&
              *s != 'o' &&
              *s != 'H')
            Usage();
      }
      else
        add_request_str(&error_requests,
            &num_error_requests,
            &argv[i]);
    }

  while(1)
  {
    int option_index = 0;
    struct option long_options[] =
    {
      {"all",  no_argument, 0, 'a' },
      {"octal",no_argument, 0, 'o' },
      {"hex",  no_argument, 0, 'H' },
      {0,0,0,0}
    };
    i = getopt_long(argc, argv, "aoH",
        long_options, &option_index);
    
    if(i == -1)
      break;
   
    switch(i)
    {
      case 'a':
        do_print_all = 1;
        break;
      case 'o':
        is_octal = 1;
        is_hex = 0;
        break;
      case 'H':
        is_hex = 1;
        is_octal = 0;
        break;
      default:
        break;
    }
  }


  if(do_print_all)
    print_all();


  if(is_hex)
    base = 16;
  else if(is_octal)
    base = 8;


  for(i=0; i<num_error_requests; ++i)
    {
      int err;
      char *endptr = 0;

      /* first see if this is a error name like
       * EPERM, EIO, etc */
       if(print_from_string(error_requests[i], 0) == 0)
         continue;

      errno = 0;
      err = strtol(error_requests[i], &endptr, base);
       
      if(!errno && err != 0 && *endptr == '\0')
         print_from_errno(err, 1, error_requests[i]);
      else
         /* If we are calling this again than let it
          * stew on this call to print_from_string(). */
         print_from_string(error_requests[i], 1);
    }
  return ret;
}

EOF
